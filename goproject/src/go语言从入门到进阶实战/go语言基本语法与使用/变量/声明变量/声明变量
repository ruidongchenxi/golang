下面先通过代码了解变量声明的基本样式


声明一个整数变量，可以保存整数数值
var a int
声明一个字符串类型的变量
var b string
声明一个32位浮点切片类型的变量,浮点切片表示由多个浮点类型组成的数据结构
var c []float32，
声明一个返回值为布尔类型的函数变量，这种形式一般用于回调函数，即将函数以变量的形式保存下来，在需要的时候重新调用这个函数
var d func ()  bool
声明一个结构体变量，这个结构体拥有一个整型X字段
var e struct {
	x int
}
 上面代码的共性是，以var关键字开头，要声明的变量名放在中间，而将其类型放在后面
 变量声明有几种形式
 1. 标准格式
 go 语言的变量声明格式为：
 var 变量名 变量类型
 变量声明以关键字var 开头，后置变量类型。行尾无须分号
 2. 批量格式
   觉得每行都用var声明变量比较麻烦，没关系有一种懒人提供的定义方法
   var(
      a int
      b string
      c []float32
      d func() bool
      e struct {
           x int
      }
   )
  使用关键字var 和括号 ，可以将一组变量定义放在一起


  初始化变量值

  go 语言在声明变量时，自动对变量对应内存区域进行初始化操作。每个变量会初始化其类型的默认值
  整型和浮点型变量的默认值为0
  字符串变量的默认值为空字符串
  布尔型变量默认为bool
  切片、函数、指针变量的默认值为nil
  当然也可以在变量声明时赋予变量一个初始化值
  标准格式
  var chenxi int = 5
  编译器类型推导的格式
  var cx = 6
  段变量声明并初始化
  x := 100
  这是go语音的类型推导声明写法，编译器会自动根据右值类型推断出左值对应的类型
  注意： 由于":=",而不是赋值的"=",因此推导声明写法的左值变量必须是没有定义的变量。若定义过，将会发生编译错误
  短变声明例子比较多
  coon,err := net.Dial("tcp","127.0.0.1:8000")
  net.Dial 提供按照指定协议和地址发起网络连接，这个函数有两个返回值，一个是连接对象，一个是err对象。标准格式就会变成
  var conn net.Conn
  var err error
  conn, err = net.Dial("tcp","127.0.0.1:8000")

  因此，短变量声明并初始化的格式在开发中使用比较普遍
  注意 在多个短变量声明和赋值中，至少有一个新变量出现在座值中，即便其他变量名可以重复定义，编译器也不会报错



多个变量同时赋值
交换两个变量的值
   cx := 6
   dx := 8
   fmt.Println(cx,dx)
   cx,dx = dx,cx
   fmt.Println(cx,dx)
多变量赋值时，变量的左值和右值按从左到右的顺序赋值
多变量赋值在go语音的错误处理和函数返回中会大量使用
使用go 语音进行拍序时就需要使用交换
匿名变量 
在使用多重赋值时,如果不需要在左值中接受变量，可以使用匿名变量
匿名变量的表现是一个“_”下画线，使用匿名变量时，只需要在变量声明的地方使用下画线替换即可
func GetData() (int,int){
   return 100, 200
}
a,_ := GetDate()
_,b := GetDate()
fmt.Println(a,b)



数据类型



	const size = 300 //声明一个size常量，值为300
	//根据给定大小创建灰度图
	pic := image.NewGray(image.Rect(0,0,size,size))//使用image包的NewGray()函数创建一个图片对象，使用区域由image.Rect结构提供。image.Rect描述一个方形的两个定位点（x1,y1）和（x2,y2）。image.Rect(0,0,size,size)表示使用完整的灰度图像素，尺寸为宽300，长300
	//遍历每个元素
	for x:=0;x<size;x++{ //遍历元素图层所有像素
		for y :=0; y<size;y++ {
			pic.SetGray(x,y,color.Gray{255})//每一个像素的灰度设为255，也是白色

		}
	}
