1. 编译当前目录
go build
或者
go build .
2 编译指定目录
编译main文件，将生成可执行文件
go build ./main.go
 编译指定文件的p1.不会产生编译文件，仅进行编译检查
 go build ./p1
3. main 包有多个文件的情况，指定文件编译main包
go build ./main ./hello.go
4. 编译时指定编译结果输出
go build -o ./out/app ./main.go ./hello.go
运行go run
1.直接通过go run 运行main包，即可运行应用程序
运行应用时指定main包下所有文件
go run ./main.go ./hello.go
运行时指定main包所在目录
go run .
交叉编译
交叉编译需要修改GOOS、GOARCH、CGO_ENABLED三个环境变量
GOOS： 目标平台的操作系统（darwin、FreeBSD、Linux、Windows）
GOARCH：目标平台的体系架构32位还是64位（386、and64、arm）
CGO_ENABLED： 是否启用CGO，交叉编译不支持CGO所以禁用
Windows 编译 Linux与mac可执行程序
# 设置环境变量
$Env:CGO_ENABLED=0;$Env:GOARCH="adm64";$Env:GOOS="linux"
# 编译并输出结果
go build -o ./out/app .
# 设置环境变量
$Env:CGO_ENABLED=0;$Env:GOARCH="adm64";$Env:GOOS="darwin"
# 编译并输出结果
go build -o ./out/app .
mac 编译Linux 与windows
CGO_ENABLED=0 GOOS=linux GOARCH=adm64 go build -o ./out/app .
CGO_ENABLED=0 GOOS=windows GOARCH=adm64 go build -o ./out/app .
Linux
CGO_ENABLED=0 GOOS=darwin GOARCH=adm64 go build -o ./out/app .
CGO_ENABLED=0 GOOS=windows GOARCH=adm64 go build -o ./out/app .