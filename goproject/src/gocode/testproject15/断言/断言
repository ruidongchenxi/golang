什么是断言
go 语言里面有一个语法，可以直接判断是否是该类型的变量：value, OK = element.(T),这里value就是变量的值，ok是一个bool类型，element是interface，T是断言的类型。
断言的案例引入
Type Switch 的基本语法

	//判断S是否可以转成Chinese类型并且赋值给ch
	var ch Chinese = s.(Chinese)
	//s.NiuyangGe()
	ch.NiuyangGe() 



    package main
import "fmt"
//接口定义
type Sayhello interface{
	//声明没有实现的方法
	Sayhello()
}
//接口的实现,结构体
type Chinese struct{

}
//自定义数据类型
type integer int 
func (i integer) Sayhello(){
	fmt.Println("say hi" ,i)
}
//实现接口的方法----》具体实现
func (person Chinese) Sayhello(){
	fmt.Println("你好")
}
// 中国人特有方法
func (person Chinese) NiuyangGe(){
    fmt.Println("东北人")
}
//接口的实现
//美国人
type American struct{

}
}
//定义函数:专门用来各国人打招呼的函数，接收具备Sayhello接口能力的变量：
func greet (s Sayhello){
	s.Sayhello()
	//判断S是否可以转成Chinese类型并且赋值给ch
	ch,flag := s.(Chinese)// //判断S是否可以转成Chinese类型并且赋值给ch
	if flag == true{
		ch.NiuyangGe()
	}else{
		fmt.Println("buhio")
	}
	//s.NiuyangGe()
	//ch.NiuyangGe()

}
func main(){
	//创建中国人
    //c := Chinese{}
	//
	a := American{}
	//var i integer = 10
	//var s Sayhello = i
	//i.Sayhello()
	greet(a)
	//greet(c)
	//greet(i)
}


Type Switch 是 go 语言中一种特殊的Switch 语句，它判断某个接口变量的类型，然后根据具体类型再做相应处理
func greet (s Sayhello){
    s.Sayhello()
	switch s.(type){//type 属于go里的关键字，固定写法
    case Chinese:
		ch := s.(Chinese)
	case American:
		am := s.(American)          
	}

}