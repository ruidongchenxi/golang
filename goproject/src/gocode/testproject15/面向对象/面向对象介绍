golang 语言是面向对象编程说明
golang 也支持面向对象编程OOP，但是和传统面向对象有区别，并不是纯粹的面向对象语言，所以我们说golang支持面向对象编程特性是比较准确的
golang 没有类（class），go语言的结构体（struct）和其他编程语言的类（calss）有同等的地位，可以理解golang是基于struct来实现OOP特性的
golang 面向对象编程非常简洁，去掉了传统OOP语言的方法重载、构造函数和析构函数、隐藏的this指针等
golang 仍然有面向对象编程的继承，封装和多态性，只是实现的方式和其他OOP语言不一样，比如继承、Golang没有extends关键字，继承是通过匿名字段来实现
结构体的引入
代码清单2-1 slice.go 
package main 
import "fmt" 
func main() { 
 // 先定义一个数组
 var myArray [10]int = [10]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10} 
 // 基于数组创建一个数组切片
 var mySlice []int = myArray[:5] 
 fmt.Println("Elements of myArray: ") 
 for _, v := range myArray { 
 fmt.Print(v, " ") 
 } 
 fmt.Println("\nElements of mySlice: ") 
 for _, v := range mySlice { 
 fmt.Print(v, " ") 
 } 
 fmt.Println()
 缺点
 不利于数据的管理、维护
 老师的很多属性属于一个对象
结构体的定义
package main
import "fmt"
//定义一个结构体
结构体创建方式1

type Teacher struct{
	//变量名字
	name string
	Age int
	School string  
}
func main(){
	//创建结构体
	var t1 Teacher 
	fmt.Println(t1)//在为赋值时默认值：{0}
	t1.name = "小溪"
	t1.Age = 45
	t1.School = "三中"
	fmt.Println(t1)
}
方式2
package main
import "fmt"
//定义一个结构体
type Teacher struct{
	//变量名字
	name string
	Age int
	School string  
}
func main(){
	//创建结构体
	var t Teacher = Teacher{"小希",16,"哈尔滨"}
	fmt.Println(t)
}
方式3

func main(){
	/*
	//创建结构体
	var t1 Teacher 
	fmt.Println(t1)//在为赋值时默认值：{0}
	t1.name = "小溪"
	t1.Age = 45
	t1.School = "三中"
	fmt.Println(t1)
	*/
	//创建结构体；*根据地址取值
	
	var t *Teacher = new(Teacher)
    //t 是指针，t其实指向的就是地址，应该给这个地址指向的对象赋值操作
	(*t).name = "小虎"
	(*t).Age = 16
	//(*t).School = "三中"
	//为了符合程序员编程习惯，go提供了简化赋值操作
	t.School = "五中" //go编译器底层对t.School 做转化(*t).School  = "三中"
	fmt.Println(*t)
}
方式4
package main
import "fmt"
//定义一个结构体
type Teacher struct{
	//变量名字
	name string
	Age int
	School string  
}
func main(){
	//创建结构体
	var t *Teacher = &Teacher{}
	(*t).name = "小虎"
	(*t).Age = 16
	//(*t).School = "三中"
	//为了符合程序员编程习惯，go提供了简化赋值操作
	t.School = "五中"
	fmt.Println(*t)
}
结构体之间转换
结构体是用户单独定义的类型，和其他类型转换时需要有完全相同的字段(名字、个数类型)
package main 
import "fmt"
type Student struct {
	Age int
}
type Person struct {
	Age int
}
func main(){
	var s Student
	var p Person
	s = Student(p)
	fmt.Println(s)
	fmt.Println(p)
}
结构体进行type重新定义(相当于取别名)，golang 
package main 
import "fmt"
type Student struct {
	Age int
}
type Stu Student
func main(){
	var s1 Student = Student{19}
	var s2 Stu = Stu{15}
	s1 = Student(s2)//强转
	fmt.Println(s1)
	fmt.Println(s2)
}