文件是什么
文件是保存数据的地方，是数据源的一种，比如，大家经常使用的word 文档。txt 文件，excel文件、jpg文件，文件的主要作用是保存数据，它既可以是图片，也可以是音频视频
os 包下的file 结构体封装了对文件的操作



file 结构体打开文件和关闭文件
打开文件，用于读取
func Open 
func Open(name string) (file *File, err error)
Open打开一个文件用于读取。如果操作成功，返回的文件对象的方法可用于读取数据；对应的文件描述符具有O_RDONLY模式。如果出错，错误底层类型是*PathError。

package main
import (
	"fmt"
	"os"
)
func main(){
	//打开文件
	file,err := os.Open("D:/pvc.yaml");
    if err != nil {
		fmt.Println("文件打开出错，对应错误为",err)
	}
	fmt.Printf("打开 yaml文件=%v",&file)
}

func (*File) Close
func (f *File) Close() error Close
关闭文件f，使文件不能用于读写。它返回可能出现的错误
package main
import (
	"fmt"
	"os"
)
func main(){
	//打开文件
	file,err := os.Open("D:/pvc.yaml");
    if err != nil {
		fmt.Println("文件打开出错，对应错误为",err)
	}
	fmt.Printf("打开 yaml文件=%v",&file)
	//err := file.Close();
	if file.Close() != nil {
		fmt.Println("关闭失败")
	}
	fmt.Println("失败")
}    
读取文件的内容并显示在终端(使用ioutil一次将整个文件读入到内存中)，这种方式适用于文件不大的情况，相关方法函数(iotil.ReadFile)
 
 func ReadFile
func ReadFile(filename string) ([]byte, error)
ReadFile 从filename指定的文件中读取数据并返回文件的内容。成功的调用返回的err为nil而非EOF。因为本函数定义为读取整个文件，它不会将读取返回的EOF视为应报告的错误。
一次性读取
package main
import (
	"fmt"
	"io/ioutil"
)
func main() {
	//备注： 在下面的过程中不需要进行open/Close操作，因为文件的打开和关闭操作被封装在readFile函数内部了
	//读取文件
	content,err := ioutil.ReadFile("D:/pvc.yaml")//返回内容为：[]byte，err
	if err != nil {//读取有误
		fmt.Println("读取错误",err)
	}
	//将打开的文件以字符串形式显示在终端
	fmt.Printf("%v",string(content))
}
带缓冲的批次读取
读取文件的内容并显示终端(带缓冲区的方式)适合读取比较大的文件。使用os.Open,file.Close,bufio.NewReader(),reader.ReadString函数和方法
package main
import (
	"fmt"
	"os"
	"bufio"
	"io"

)
func main(){
    file,err := os.Open("D:/pvc.yaml")
    if err != nil{
		fmt.Println("文件打开失败",err)
	}
	//当函数退出时，让file 关闭防止内存泄漏
	defer file.Close()
	//创建一个流
	reader := bufio.NewReader(file)
    //读取操作
	for {
	str,err1 := reader.ReadString('\n')//字符单引号
	    if err1 == io.EOF {//io.EOF 表示已经读取到文件结尾
			break//终止循环
		}
		fmt.Println(str)
	}
}




func OpenFile 
func OpenFile(name string, flag int, perm FileMode) (file *File, err error)
OpenFile是一个更一般性的文件打开函数，大多数调用者都应用Open或Create代替本函数。它会使用指定的选项（如O_RDONLY等）、指定的模式（如0666等）打开指定名称的文件。如果操作成功，返回的文件对象可用于I/O。如果出错，错误底层类型是*PathError。


写入文件
打开文件
三个参数
要打开文件的路径
文件打开的模式


const (
    O_RDONLY int = syscall.O_RDONLY // 只读模式打开文件
    O_WRONLY int = syscall.O_WRONLY // 只写模式打开文件
    O_RDWR   int = syscall.O_RDWR   // 读写模式打开文件
    O_APPEND int = syscall.O_APPEND // 写操作时将数据附加到文件尾部
    O_CREATE int = syscall.O_CREAT  // 如果不存在将创建一个新文件
    O_EXCL   int = syscall.O_EXCL   // 和O_CREATE配合使用，文件必须不存在
    O_SYNC   int = syscall.O_SYNC   // 打开文件用于同步I/O
    O_TRUNC  int = syscall.O_TRUNC  // 如果可能，打开时清空文件
)
用于包装底层系统的参数用于Open函数，不是所有的flag都能在特定系统里使用的。
 const (
    SEEK_SET int = 0 // 相对于文件起始位置seek
    SEEK_CUR int = 1 // 相对于文件当前位置seek
    SEEK_END int = 2 // 相对于文件结尾位置seek
) 
指定Seek函数从何处开始搜索（即相对位置） 
const (
    PathSeparator     = '/' // 操作系统指定的路径分隔符
    PathListSeparator = ':' // 操作系统指定的表分隔符
) const DevNull = "/dev/null"
权限控制（）
示例
package main
import (
	"fmt"
	"os"
	"bufio"

)
func main(){
	file , err := os.OpenFile("D:/Demo.txt",os.O_RDWR | os.O_APPEND | os.O_CREATE,0666)
	if err != nil{//文件失败
		fmt.Println("文件打开失败")
	}
	//及时关闭从操作
	defer file.Close()
	//写入文件操作：-----》IO流-----》 输出流
    writer := bufio.NewWriter(file)
	for i := 0; i < 10; i++ {
	writer.WriteString("你好，马士兵\n")
	}
	//流带缓存区
	writer.Flush()
}
