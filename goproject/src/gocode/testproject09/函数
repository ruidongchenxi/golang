1. 函数作用
提高代码复用，减少冗余，代码的维护性提高
2. 函数的定义
为完成某一功能的程序指令（语句）的集合，称为函数
3.基本语法
func 函数名字 （形参列表） （返回值类型列表）{
    执行语句
    return + 返回值列表
}
4.函数与函数之前是并列的关系。所以定义函数不能写到main 里面
package main
import "fmt"
//定义函数
func cal (num1 int,num2 int) (int) { //如果返回值类型就一个的话，那么（）可以省略不写的
    var sum int
	sum += num1
	sum += num2
	return sum
}
func main(){
	var c int 
	var d int 
	fmt.Printf("请输入要计算的两个数值空格分开")
	fmt.Scanf ("%d %d",&c, &d)
// 调用函数
    sum := cal(c,d)
	fmt.Println(sum)

}


（1）函数名 
遵循标识符命名规范： 见名之意、驼峰命名
首字母不能是数字
首字母大写该函数可以被本包文件和其他文件使用（类似public）
首字母小写只能被本包文件使用。其他包文件不能使用（类似private）
（2）.形参列表 
个数： 可以1个；可以N个，可以是0个
形式参数列表： 作用：接受外来数据
实参列表：实际调用时传入的参数
（3）.返回值类型列表
返回0 个来返回1个返回多个
5. 函数不支持重载
7. golang 中支持可变参数（如果你希望函数带有可变参数）
package main
import "fmt"
//定义可变变量
func test (args...int)  { //如果返回值类型就一个的话，那么（）可以省略不写的
//在函数内部处理可变参数的时候，将可变参数当做切片处理
//遍历可变参数
     for i :=0; i <len(args);i++{
		fmt.Println(args[i])
	 }
}
func main(){
    test ()
	fmt.Println("..............")
	test (1)
	fmt.Println("..............")
	test (2,3,4,5)
	fmt.Println("..............")

}
8. 基本数据类型和数组默认都是值传递的，即进行值拷贝。在函数内修改，不会影响到原来的值
package main
import "fmt"
func test (num int){
	num = 30
	fmt.Println("test-----------",num)

} 
func main(){
	var num int = 10
	test(num)
	fmt.Println("main--------",num)
}
9. 以值传递方式的数据类型，如果希望在函数内的变量能修改函数外的变量，可以传入变量值的地址&，函数内以指针的方式操作变量。从效果来看类似引用传递
package main
import "fmt"
func test (num *int){
	*num = 30
	fmt.Println("test地址值-----------",num)
	fmt.Println("test值-----------",*num)

} 
func main(){
	var num int = 10
	test(&num)
	fmt.Println("main--------",num)
}



在go 中，函数也是一种数据类型，可以赋值给一个变量，则该变量就是一个函数类型。通过该变量可以对函数调用
函数既然作为一种数据类型，因此在go中，函数可以作为形参，并且调用
为了简化数据类型定义，go支持自定义数据类型
	//自定义数据类型
	type myInt int 
	var num1 myInt = 30
	fmt.Println("num1",num1)
	var num2 int = 30
	num2 = int(num1) //虽然起别名，但是编译识别的时候还是识别为不同数据类型的变量；强制数据类型转换，
	fmt.Println("num2",num2)
基本语法： type 自定义数据类型名字 数据类型
可以理解： 起一个别名
支持对函数返回值命名
 func test05 (num1 int,num2 int)(sub int,sum int){
	sum := num1 + num2
	sub := num1 - num2
	return 
}