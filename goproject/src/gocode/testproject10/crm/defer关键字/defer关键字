defer 关键字的作用
在函数中。程序员经常需要创建资源，为了在函数执行完毕后，及时释放资源，go 设计者提供defer 关键字






package main
import "fmt"
func main(){
	fmt.Println(add(30,60))

}
func add(num1 int,num2 int) int{
	//在golang中，程序遇到defer关键字不会立即执行defer后的语句，而是将defer后的语句压入一个栈中，然后继续执行函数后面的语句
	defer fmt.Println("num1 =",num1)
	defer fmt.Println("num2 =",num2)
	num1 += 90
	num2 += 30
	fmt.Println(num1,num2)
	//栈的特点先进后出
	//函数执行完成，从栈中取出语句开始执行
	var sum int = num1 + num2
	fmt.Println("sum=",sum)
	return sum
}


D:\golang\goproject\src\gocode\testproject10\crm\main>go run D:\golang\goproject\src\gocode\testproject10\crm\defer关键字\main.go
sum= 90
num2 = 60
num1 = 30
90

D:\golang\goproject\src\gocode\testproject10\crm\main>go run D:\golang\goproject\src\gocode\testproject10\crm\defer关键字\main.go
120 90
sum= 210
num2 = 60
num1 = 30
210


发现：遇到defer关键字，会将后面的代码语句压入栈中，也会将相关的值同时拷贝入栈中，不会随者函数后面的变化而变化
defer 应用场景
比如想关闭某个使用的资源，在使用的时候直接随手defer，因为defer有延迟执行机制（函数执行完毕在执行defer压入），所以你用完随手写了关闭，比较省心，省事



