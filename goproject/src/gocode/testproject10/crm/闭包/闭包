什么是闭包
闭包就是一个函数和与其相关的引用环境组合的一个整体
案例展示
package main
import "fmt"
// 函数求和
//函数名字：getSum 参数为空
//函数getSum 函数返回值为一个参数，这个函数的参数是一个int 类型的参数，返回值也是int 类型

func getSum() func (int) int {
    var sum int = 10 
	return  func(num1 int) int{
		sum = sum + num1
		return sum
	}
}
//闭包： 返回的匿名函数+匿名函数以外的变量是num
func main(){
	f := getSum()
	fmt.Println(f(1))//11
	fmt.Println(f(3))//14
}
感受 ：匿名函数中引用的那个变量会一直保存在内存中，可以一直使用

闭包本质
闭包本质依旧是一个匿名函数，只是这个函数引入外界变量参数
匿名函数+引用的变量参数=闭包
特点
返回的是一个匿名函数，但是这个匿名函数引用到函数外的变量/参数，因此这个匿名函数就和变量参数形成一个整体，构成闭包
闭包使用的变量/参数会一直保存在内存中，所以会一直使用----》意味着闭包不可滥用




不使用闭包可以吗？
//闭包： 返回的匿名函数+匿名函数以外的变量是num
func main(){
	f := getSum()
	fmt.Println(f(1))//11
	fmt.Println(f(3))//14
	fmt.Println("---------------------------------------")
	fmt.Println(getSum01(1))
	fmt.Println(getSum01(2))
	fmt.Println(getSum01(3))
}
// 不累加
func getSum01(num int) int{
	var sum int = 0
	sum = sum + num
	return sum
}
//不使用闭包的时候： 想保留的值，不可以反复使用