



func main(){
    test()
	fmt.Println("上面除法操作执行成功")
	fmt.Println("正常执行")
}
func test(){
	num1 := 10
	num2 := 0
	result := num1 / num2
	fmt.Println(result)
}

D:\golang\goproject\src\gocode\testproject10\crm>go run D:\golang\goproject\src\gocode\testproject11\错误处理\main.go   
panic: runtime error: integer divide by zero                                                                            
                                                                                                                        
goroutine 1 [running]:                                                                                                  
main.test()                                                                                                             
        D:/golang/goproject/src/gocode/testproject11/错误处理/main.go:11 +0x9                                           
main.main()                                                                                                             
        D:/golang/goproject/src/gocode/testproject11/错误处理/main.go:4 +0x17                                           
exit status 2                                                              
程序出现错误之后程序被中断无法继续执行
错误捕获机制
go 中追求代码优雅，引入机制：defer+recover 机制处理错误

recover
内建函数recover允许程序管理恐慌过程中的Go程。在defer的函数中，执行recover调用会取回传至panic调用的错误值，恢复正常执行，停止恐慌过程。若recover在defer的函数之外被调用，它将不会停止恐慌过程序列。在此情况下，或当该Go程不在恐慌过程中时，或提供给panic的实参为nil时，recover就会返回nil。
package main
import "fmt"
func main(){
    test()
	fmt.Println("上面除法操作执行成功")
	fmt.Println("正常执行")
}
func test(){
	//利用defer + recover 来捕获错误
	defer func(){
		//调用recover内置函数
		err := recover()
		//如果没有错误，返回值为零值：nil
		if err != nil{
			fmt.Println("错误已经捕获")
			fmt.Println("err",err)
		}
	}()// 匿名函数调用方式
	num1 := 10
	num2 := 0
	result := num1 / num2
	fmt.Println(result)
}
优点提高程序健壮性
自定义错误
