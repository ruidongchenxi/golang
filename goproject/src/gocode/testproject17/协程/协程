1. 程序
  程序是指按照一定规则和逻辑编写的一组指令或代码，用于让计算机执行特定任务或解决特定问题。
2. 进程
进程是操作系统中一个非常重要的概念，简单来说，进程是正在运行的程序的实例。
**进程**是操作系统中一个非常重要的概念，简单来说，**进程是正在运行的程序的实例**。

---

### **进程的定义**
进程是计算机中的基本运行单位，是程序在操作系统中的一次执行活动。进程负责运行程序的代码，并管理程序所需的资源（如内存、文件、CPU 时间等）。

1. **程序 vs. 进程**：
   - **程序**是静态的代码文件（例如 `.exe` 文件或脚本），存储在磁盘上。
   - **进程**是程序运行时被加载到内存后执行的实例，是动态的。

2. **多次执行**：
   - 一个程序可以被多次运行，每次运行都对应一个独立的进程。例如，打开多个浏览器窗口，每个窗口都是浏览器程序的一个进程。

---

### **进程的特点**
1. **动态性**：
   - 进程是程序的运行过程，只有在执行时才存在，结束后就会消失。

2. **独立性**：
   - 进程是操作系统资源分配的基本单位，不同进程之间通常是相互独立的，拥有各自的内存空间。

3. **并发性**：
   - 操作系统可以同时运行多个进程，这种能力称为“并发”。
   - 在多核 CPU 上，多个进程甚至可以真正地同时运行（并行）。

4. **资源占用**：
   - 进程需要占用系统资源，如 CPU 时间、内存、文件描述符等。

---

### **进程的生命周期**
1. **创建状态**：
   - 进程被创建，尚未执行。
2. **就绪状态**：
   - 进程已经准备好执行，但正在等待 CPU 分配时间。
3. **运行状态**：
   - 进程正在 CPU 上执行。
4. **阻塞状态**：
   - 进程因等待 I/O 或其他事件而暂停，不能继续执行。
5. **终止状态**：
   - 进程完成任务或被强制结束，资源被回收。

---

### **操作系统对进程的管理**
操作系统需要负责以下与进程相关的任务：

1. **进程调度**：
   - 操作系统会决定哪个进程在什么时候运行。常见的调度算法包括先来先服务（FCFS）、时间片轮转、优先级调度等。

2. **进程通信**：
   - 不同进程之间可能需要交换数据，常用的进程间通信（IPC）方式有：
     - 管道（Pipe）
     - 消息队列（Message Queue）
     - 共享内存（Shared Memory）
     - 信号量（Semaphore）

3. **进程同步**：
   - 如果多个进程需要共享资源，操作系统需要避免竞争条件（Race Condition），通常通过锁或信号量来实现同步。

4. **进程资源管理**：
   - 操作系统为每个进程分配必要的资源（如内存、文件句柄等），并在进程终止时回收资源。

---

### **多进程模型**
1. **定义**：
   - 同一时刻，系统中可以存在多个进程，并且这些进程可以并发执行。

2. **优点**：
   - 提高系统效率，充分利用 CPU 和 I/O 资源。
   - 进程间互相隔离，安全性更高。

3. **缺点**：
   - 进程切换（Context Switching）开销较大。
   - 每个进程都有独立的内存空间，消耗的资源较多。

---

### **进程与线程的区别**
| **特性**     | **进程**                                | **线程**                              |
|--------------|-----------------------------------------|---------------------------------------|
| **定义**     | 程序的独立运行实例。                   | 进程内的执行单元，共享进程资源。      |
| **资源占用** | 每个进程有独立的资源（内存、句柄等）。  | 多线程共享进程资源，开销更小。        |
| **隔离性**   | 进程之间相互独立，较高安全性。          | 同一进程内线程共享资源，隔离性较差。  |
| **性能**     | 创建和切换进程的开销较大。              | 线程创建和切换的开销较小。            |
| **并发性**   | 支持多进程并发。                       | 支持多线程并发，粒度更小，效率更高。  |

---

### **进程的实际应用**
1. **多任务系统**：
   - 现代操作系统（如 Windows、Linux）可以同时运行多个程序，每个程序对应一个或多个进程。
   
2. **后台服务**：
   - 如数据库服务、Web 服务等常驻内存的服务程序，运行时以进程的形式存在。

3. **分布式系统**：
   - 多个进程可能分布在不同机器上，共同完成任务。

线程

### **线程的定义**
线程是程序执行的最小单位，是进程中的一个子任务。每个进程至少包含一个线程（主线程），线程之间共享进程的资源，但可以独立执行。

简单来说：
- **进程**是资源分配的单位。
- **线程**是 CPU 调度的单位。

### **线程的特点**
 **轻量级**：
   - 线程比进程更轻量，占用的系统资源少，创建和销毁速度更快。
   
 **共享性**：
   - 同一进程中的多个线程共享内存空间、文件句柄等资源，但有各自的栈空间和寄存器。

 **并发性**：
   - 线程可以并发执行，从而提高程序的效率。
   - 多核 CPU 可以真正实现多线程的并行运行。

 **独立性**：
   - 虽然线程共享资源，但每个线程的执行流是独立的，可以并行处理不同任务。

---

### **线程的生命周期**
线程在运行过程中会经历以下状态：

 **创建**：
   - 线程被创建后进入“就绪状态”，等待操作系统调度。

 **就绪**：
   - 线程准备好运行，但尚未被分配 CPU。

 **运行**：
   - 线程正在 CPU 上执行。

 **阻塞**：
   - 线程因等待资源（如 I/O 或锁）而暂停，暂时无法运行。

 **终止**：
   - 线程完成任务或被强制终止，退出运行。

---

### **线程的优点**
 **高效性**：
   - 线程切换的开销比进程低（因为线程共享进程的资源，切换时无需切换内存空间）。

 **并发处理**：
   - 多线程程序可以充分利用多核 CPU，显著提升计算密集型或 I/O 密集型任务的性能。

 **资源共享**：
   - 同一进程内的线程共享资源，通信更简单（如通过全局变量共享数据）。

---

### **线程的缺点**
 **复杂性**：
   - 多线程编程需要处理线程间的同步和互斥，避免资源竞争（Race Condition）和死锁（Deadlock）。

 **共享资源风险**：
   - 因为线程共享进程资源，如果一个线程出错（如写入错误数据），可能会影响整个进程。

 **调试困难**：
   - 多线程程序的错误（如线程安全问题）难以重现和调试。

---

### **线程与进程的区别**
| **特性**         | **进程**                          | **线程**                          |
|------------------|----------------------------------|----------------------------------|
| **定义**         | 独立的程序执行实例。              | 进程中的执行单元，共享资源。      |
| **资源共享**     | 进程之间独立，资源隔离性强。       | 同一进程内的线程共享资源。        |
| **开销**         | 创建、切换进程需要更多资源和时间。  | 线程创建、切换开销较小。          |
| **安全性**       | 进程隔离，出错不影响其他进程。      | 线程共享资源，错误可能影响整个进程。 |
| **通信**         | 进程间通信复杂（如管道、消息队列）。 | 线程间通信简单（共享内存）。      |

---

### **多线程的实际应用**
 **并行计算**：
   - 在多核 CPU 上，线程可以同时运行，处理任务更快。
   - 例如：视频编码、科学计算。

 **I/O 密集型任务**：
   - 通过多线程处理文件读写、网络请求等任务，提高效率。
   - 例如：高并发 Web 服务器（如 Nginx、Go 的 HTTP 服务器）。

 **实时任务**：
   - 通过线程优先级设置，确保关键任务的实时性。
   - 例如：游戏引擎的渲染线程、物理计算线程。

---

### **多线程编程中的常见问题**
 **线程安全**：
   - 多线程共享资源时可能引发竞争条件，导致数据不一致。
   - **解决方案**：使用互斥锁（Mutex）、读写锁（RWMutex）等同步机制。

 **死锁**：
   - 两个或多个线程因为互相等待资源而进入无限阻塞状态。
   - **解决方案**：设计锁的获取顺序或使用死锁检测机制。

 **上下文切换开销**：
   - 多线程带来的高频上下文切换可能降低性能。
   - **优化**：使用协程（如 Go 的 goroutine）降低切换成本。


### **Go 中的线程与 Goroutine**
Golang 使用 **Goroutine** 代替传统的线程，提供更轻量级的并发支持：

 **特点**：
   - Goroutine 是 Go 的用户级线程，比操作系统线程更轻量。
   - Goroutine 数量可以远远超过线程（数十万甚至更多）。

 **实现**：
   - Goroutine 使用 Go 的 **runtime** 管理，调度成本更低。
   - 数据共享时需要同步机制，如 `sync.Mutex` 或 `channel`。

 **示例**：
   ```go
   package main

   import (
       "fmt"
       "time"
   )

   func say(s string) {
       for i := 0; i <  i++ {
           fmt.Println(s)
           time.Sleep(0 * time.Millisecond)
       }
   }

   func main() {
       go say("Hello") // 启动 Goroutine
       say("World")    // 主线程
   }
   ```
协程


### **协程的定义**

**协程**（Coroutine）是比线程更轻量级的并发执行单元。它是用户态的线程，由程序自行调度，而非操作系统管理。协程可以暂停自己的执行，并在稍后恢复，从而实现高效的并发。

与线程相比，协程不需要操作系统的上下文切换开销，因此可以同时创建大量协程，特别适合高并发场景。

---

### **协程的特点**

1. **轻量级**：
   - 协程占用的内存和资源远少于线程。在 Go 中，每个 Goroutine 只占用几 KB 的栈内存。
   
2. **非抢占式调度**：
   - 协程在用户态由程序自行调度，执行到某一处时可以主动挂起（暂停），释放资源给其他协程运行。

3. **协作式运行**：
   - 协程通过协作（如调用特定的暂停函数）让出执行权，而不是由操作系统强制抢占。

4. **高效性**：
   - 协程的切换比线程快得多，因为它只需保存和恢复少量的状态。

5. **适合 I/O 密集型任务**：
   - 协程特别适合处理大量 I/O 阻塞操作（如网络请求、文件读写），因为它们可以在等待时挂起，而不阻塞其他协程。

---

### **协程与线程的对比**

| **特性**         | **协程**                              | **线程**                            |
|------------------|--------------------------------------|-------------------------------------|
| **调度**         | 用户态调度，由程序管理。               | 由操作系统内核调度。                 |
| **切换开销**     | 非常小，仅需保存和恢复寄存器状态。      | 较大，需要切换内存页表、寄存器等。   |
| **并发性**       | 协程可以高效并发，但单协程无法多核并行。 | 线程可以并行运行，适合多核任务。     |
| **数量**         | 每个进程可创建数十万甚至更多协程。       | 每个进程的线程数量有限（内存和资源约束）。 |
| **资源占用**     | 栈空间小，几 KB。                     | 栈空间大，通常是几 MB。             |
| **阻塞**         | 阻塞操作只影响当前协程。               | 阻塞操作可能导致整个线程挂起。       |

---

### **协程的实现方式**

不同语言对协程的实现可能有所不同。例如：
1. **Golang 的 Goroutine**：
   - 轻量级协程，由 Go 运行时调度。
   - 使用 `go` 关键字启动协程。

2. **Python 的 Coroutine**：
   - 使用 `async` 和 `await` 实现异步协程。
   - 借助事件循环（如 `asyncio` 模块）管理协程。

3. **JavaScript 的异步函数**：
   - 通过 `async/await` 和 `Promise` 支持协程风格的异步编程。

4. **C++ 的协程**：
   - 使用 C++20 标准中引入的协程支持，通过 `co_await` 和 `co_yield` 关键字实现。

---

### **Golang 中的 Goroutine（协程）**

Goroutine 是 Go 中对协程的实现，提供了简单高效的并发支持。

#### **特点**
1. **轻量级**：
   - 每个 Goroutine 的初始栈大小仅 2 KB，并且可以按需动态增长。

2. **高效调度**：
   - Goroutine 由 Go 的运行时调度器（GMP 模型）管理，避免了操作系统线程的调度开销。

3. **适合高并发**：
   - 在实际应用中，Goroutine 可轻松创建数十万甚至上百万个协程。

#### **代码示例**
```go
package main

import (
    "fmt"
    "time"
)

func task(name string) {
    for i := 0; i < 5; i++ {
        fmt.Printf("%s is running: %d\n", name, i)
        time.Sleep(100 * time.Millisecond)
    }
}

func main() {
    go task("Goroutine 1") // 启动一个 Goroutine
    go task("Goroutine 2") // 启动另一个 Goroutine

    time.Sleep(1 * time.Second) // 主线程等待 Goroutine 完成
    fmt.Println("Main function ends")
}
```

#### **输出（示例）**
```
Goroutine 1 is running: 0
Goroutine 2 is running: 0
Goroutine 1 is running: 1
Goroutine 2 is running: 1
...
Main function ends
```

#### **注意事项**
- **数据竞争**：多个 Goroutine 同时访问共享数据时，需要使用同步机制（如 `sync.Mutex`）。
- **Channel 通信**：Go 提供了 `channel`，用于 Goroutine 间安全地传递数据。

---

### **协程的典型应用场景**

1. **高并发网络服务**：
   - 使用协程处理大量客户端请求（如 Web 服务器、在线聊天工具）。
   - 示例：Go 的 `net/http` 包。

2. **异步任务**：
   - 在不阻塞主线程的情况下处理长时间运行的任务。

3. **任务调度**：
   - 协程用于实现复杂的任务调度逻辑（如分布式任务系统）。

4. **实时系统**：
   - 协程用于处理多个实时任务（如游戏引擎的渲染、物理计算）。

---

### **Goroutine 的 GMP 模型**

Go 运行时调度器使用 **GMP 模型**（Goroutine、Machine、Processor）实现高效的协程管理。

1. **G（Goroutine）**：
   - 表示 Goroutine，即协程。

2. **M（Machine）**：
   - 表示操作系统线程，负责实际执行 Goroutine。

3. **P（Processor）**：
   - 表示处理器，负责分配 Goroutine 到 M 上。

**调度过程**：
- Goroutine 由 P 调度，绑定到 M 进行执行。
- 多个 Goroutine 可以在一个 M 上切换执行。









案例展
写一个程序，完成如下功能
(1)在主线程中，开启goroutine,该goroutine每秒输出"hello golang"
(2)在主线程中也隔一秒输出"hello msb" ,输出10秒退出程序
要求主线程和goroutine同时执行




package main
import (
	"fmt"
	"strconv"
	"time"
)

func test(){
	for i :=1 ; i <= 10 ;i++ {
		fmt.Println("hello golang" + strconv.Itoa(i))
		//阻塞1秒
		time.Sleep(time.Second)
	}
}
func task(name string) {
    for i := 0; i < 5; i++ {
        fmt.Printf("%s is running: %d\n", name, i)
        time.Sleep(100 * time.Millisecond)
    }
}
func main(){	
	go test()// 开启协程
	go task("Goroutine 1")
	go task("Goroutine 2")
	for i :=1 ; i <= 10 ;i++ {
		fmt.Println("hello cx" + strconv.Itoa(i))
		//阻塞1秒
		time.Sleep(time.Second)
	}

}
主死从随
如果主线程退出则协程没有执行完，也会退出
当然协程也可以在主线程没有退出前，就结束了，比如完成自己的任务
package main
import (
	"fmt"
	"strconv"
	"time"
)

func test(){
	for i :=1 ; i <= 50 ;i++ {
		fmt.Println("hello golang" + strconv.Itoa(i))
		//阻塞1秒
		time.Sleep(time.Second)
	}
}
func task(name string) {
    for i := 0; i < 5; i++ {
        fmt.Printf("%s is running: %d\n", name, i)
        time.Sleep(100 * time.Millisecond)
    }
}
func main(){	
	go test()// 开启协程
	go task("Goroutine 1")
	go task("Goroutine 2")
	for i :=1 ; i <= 10 ;i++ {
		fmt.Println("hello cx" + strconv.Itoa(i))
		//阻塞1秒
		time.Sleep(time.Second)
	}

}

多个函数


package main
import (
	"fmt"
	// "strconv"
    "time"
)

func main(){
	//匿名函数+ 外部函数= 闭包
	for i:=1 ;i <=5 ;i++{
	go func() { //匿名函数，启动协程
		fmt.Println(i)
	}()
	}
	time.Sleep(time.Second *2)
}


type WaitGroup
type WaitGroup struct {
    // 包含隐藏或非导出字段
}
 WaitGroup用于等待一组线程的结束。父线程调用Add方法来设定应等待的线程的数量。每个被等待的线程在结束时应调用Done方法。同时，主线程里可以调用Wait方法阻塞至所有线程结束。
func (*WaitGroup) Add
func (wg *WaitGroup) Add(delta int)
Add方法向内部计数加上delta，delta可以是负数；如果内部计数器变为0，Wait方法阻塞等待的所有线程都会释放，如果计数器小于0，方法panic。注意Add加上正数的调用应在Wait之前，否则Wait可能只会等待很少的线程。一般来说本方法应在创建新的线程或者其他应等待的事件之前调用。

func (*WaitGroup) Done
func (wg *WaitGroup) Done()
Done方法减少WaitGroup计数器的值，应在线程的最后执行。

func (*WaitGroup) Wait
func (wg *WaitGroup) Wait()
Wait方法阻塞直到WaitGroup计数器减为0。




package main
import (
	"fmt"
	// "strconv"
    "sync"
)
var wg sync.WaitGroup//指定要不赋值
func main(){
	//匿名函数+ 外部函数= 闭包；启动5个协程
	for i:=1 ;i <=5 ;i++{
	wg.Add(1)// 协程开始加1
	go func() { //匿名函数，启动协程
		defer wg.Done()
      fmt.Println(i)
		//wg.Done() //协程结束执行完成减一
	}()
	}
	//阻塞主线程，\什么时候wg 减为0，就停止阻塞
	wg.Wait()
	
}





多个协程操作同一个数据
package main
import (
	"fmt"
    "sync"
)
//
var t int
var wg sync.WaitGroup
func add(){
	defer wg.Done()
	for i :=0;i < 100000;i++{
		t = t +1
	}
}
func sub(){
	defer wg.Done()
	for i :=0;i < 100000;i++{
		t = t -1
	}
}
func main(){
	wg.Add(2)
	//启动协程
	go add()
	go sub()
	wg.Wait()
	fmt.Println(t)
}

结果
D:\golang\goproject\src>go run D:\golang\goproject\src\gocode\testproject17\协程\main2.go
15006

D:\golang\goproject\src>go run D:\golang\goproject\src\gocode\testproject17\协程\main2.go
78822

D:\golang\goproject\src>go run D:\golang\goproject\src\gocode\testproject17\协程\main2.go
97035

D:\golang\goproject\src>go run D:\golang\goproject\src\gocode\testproject17\协程\main2.go
-59582
解决结果不一致问题
有机制，确保，一个协程在执行逻辑的时候另一个协程不执行
锁介绍（互斥锁）
### **读写锁的概念**

**读写锁**（Read-Write Lock）是一种锁机制，允许多个线程同时读取共享资源，但在写入时，必须独占该资源。它通过区分读操作和写操作，提高了多线程程序的性能。

---

### **读写锁的特点**

1. **共享与独占**：
   - **共享锁（读锁）**：多个线程可以同时获取读锁，共享资源的读取。
   - **独占锁（写锁）**：只有一个线程可以获取写锁，其他线程（读或写）必须等待。

2. **读写互斥**：
   - 如果有线程持有写锁，则其他线程无法获得读锁或写锁。
   - 如果有线程持有读锁，则其他线程可以继续读，但无法获得写锁。

3. **适用场景**：
   - 读操作远多于写操作的场景，如缓存系统、配置文件读取等。

---

### **读写锁的工作原理**

1. **多读**：读操作不互相阻塞，多个线程可以同时读取。
2. **单写**：写操作独占资源，阻塞所有其他读写操作。
3. **写优先或读优先**：
   - 某些实现可能优先允许写线程，避免写线程长时间等待（写优先策略）。
   - 也可以优先允许读线程，提升读取性能（读优先策略）。

---

### **Go 中的读写锁**

Go 提供了 `sync.RWMutex` 实现读写锁。它是 `sync.Mutex` 的扩展，支持读锁和写锁。

#### **`sync.RWMutex` 的方法**
1. `RLock()`：获取读锁。
2. `RUnlock()`：释放读锁。
3. `Lock()`：获取写锁。
4. `Unlock()`：释放写锁。

---

### **代码示例**

#### **基础示例**
```go
package main

import (
	"fmt"
	"sync"
	"time"
)

var (
	data  int
	lock  sync.RWMutex
	wg    sync.WaitGroup
)

func read(id int) {
	defer wg.Done()
	lock.RLock() // 获取读锁
	fmt.Printf("Reader %d: Read data: %d\n", id, data)
	time.Sleep(1 * time.Second)
	lock.RUnlock() // 释放读锁
}

func write(id int, value int) {
	defer wg.Done()
	lock.Lock() // 获取写锁
	fmt.Printf("Writer %d: Write data: %d\n", id, value)
	data = value
	time.Sleep(2 * time.Second)
	lock.Unlock() // 释放写锁
}

func main() {
	wg.Add(5)
	go read(1)
	go write(1, 10)
	go read(2)
	go write(2, 20)
	go read(3)

	wg.Wait()
}
```

#### **运行示例**
可能的输出如下：
```
Reader 1: Read data: 0
Writer 1: Write data: 10
Reader 2: Read data: 10
Writer 2: Write data: 20
Reader 3: Read data: 20
```

---

### **注意事项**

1. **读写锁适用场景**：
   - 适合读操作多、写操作少的场景，能显著提高性能。
   - 写操作频繁时，性能可能会因为阻塞而降低。

2. **避免死锁**：
   - 确保读锁和写锁的获取与释放顺序正确，避免嵌套使用造成死锁。

3. **性能与锁粒度**：
   - 读写锁适用于大粒度锁的场景。
   - 如果读写操作频繁切换，读写锁的性能可能不如细粒度锁。

---

### **常见应用场景**

1. **缓存系统**：
   - 读写锁用于控制对缓存数据的访问，多读少写的场景可以显著提高性能。

2. **配置读取**：
   - 系统运行过程中读取配置文件时，使用读写锁保护配置的更新与读取。

3. **共享资源管理**：
   - 控制对共享资源（如全局变量、文件）的并发访问。

---

如果你有更多疑问，或者希望了解更复杂的场景（如锁优化），欢迎继续交流！
锁机制
互斥锁
type Mutex 
type Mutex struct {
    // 包含隐藏或非导出字段
} 
Mutex是一个互斥锁，可以创建为其他结构体的字段；零值为解锁状态。Mutex类型的锁和线程无关，可以由不同的线程加锁和解锁。
func (*Mutex) Lock func (m *Mutex) Lock() 
 Lock方法锁住m，如果m已经加锁，则阻塞直到m解锁。 
func (*Mutex) Unlock func (m *Mutex) Unlock() 
 Unlock方法解锁m，如果m未加锁会导致运行时错误。锁和线程无关，可以由不同的线程加锁和解锁。
 package main
import (
	"fmt"
    "sync"
)
//加入互斥锁
var lock sync.Mutex
var t int
var wg sync.WaitGroup
//var lock sync.Mutex
func add(){
	defer wg.Done()
	for i :=0;i < 100000;i++{
		//枷锁
		lock.Lock()
		t = t +1
		//
		lock.Unlock()
	}
}
func sub(){
	defer wg.Done()
	//lock.Lock()
	for i :=0;i < 100000;i++{
        lock.Lock()	
		t = t -1
		lock.Unlock()
	}
	
}
func main(){
	wg.Add(2)
	//启动协程
	go add()
	go sub()
	wg.Wait()
	fmt.Println(t)
}
互斥锁 Mutex 