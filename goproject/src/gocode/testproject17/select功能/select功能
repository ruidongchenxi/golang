select 功能：解决多个管道的选择问题，也可以叫做多路复用。可以从多个管道随机公平地选择一个来执行
case 后面必须进行的IO操作，不能是等值，随机去选择一个IO操作
default 防止select被阻塞住加入default
package main
import (
	"fmt"
	"time"
)
func main(){
	//定义一个int 的管道
	intChan := make(chan int,1)
	//定义一个string管道
	stringChan := make(chan string,1)
	go func(){
		time.Sleep(time.Second * 7)
		intChan<- 10
	}()
	go func(){
		time.Sleep(time.Second * 2)
		stringChan<- "尘曦"
	}()

	//fmt.Println(<-intChan)//本身取数据就是阻塞
	select{
		case v := <-intChan :
		    fmt.Println("intChan",v)
		case v := <-stringChan :
			fmt.Println("stringChan",v)
		default:
			fmt.Println("防止阻塞")
	}
}  
1 多个协程工作，其中一个协程出现panic ,导致程序崩溃

解决办法
案例
package main
import(
	"fmt"
	_"time"
	"sync"
)
var wg sync.WaitGroup
//hanshu
func prinmun(){
	defer wg.Done()
	for i := 1;i <=10;i++{
		fmt.Println(i)
	//	time.Sleep(time.Second)
	}
}
func devide(){
	defer wg.Done()
	defer func(){
		err := recover()
		if err != nil{
			fmt.Println("cuowu")
		}
	}()
	//defer wg.Done()
	num1 := 0
	num2 := 20
	result := num2 / num1
	//time.Sleep(time.Second)
	fmt.Println(result)
	
}

func main(){
	wg.Add(2)
    go prinmun()
	go devide()
	wg.Wait()
}